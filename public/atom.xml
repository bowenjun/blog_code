<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1742的个人博客</title>
  
  <subtitle>笔者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ss1742.com/"/>
  <updated>2017-07-11T11:59:46.000Z</updated>
  <id>http://www.ss1742.com/</id>
  
  <author>
    <name>1742</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6 笔记</title>
    <link href="http://www.ss1742.com/2017/07/11/es6/"/>
    <id>http://www.ss1742.com/2017/07/11/es6/</id>
    <published>2017-07-11T10:16:14.000Z</published>
    <updated>2017-07-11T11:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h2><p>声明变量</p><ul><li>只在其代码块有效</li><li>不存在变量提升</li><li><p>暂时性死区</p><ul><li>暂时性死区：如果区块中存在let和const命令，这个区块对这些命令声明的变量从一开始就形成封闭的作用域<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不允许重复声明</p></li></ul><a id="more"></a><blockquote><p>let</p></blockquote><ul><li>无</li></ul><blockquote><p>const</p></blockquote><ul><li>声明常量，一旦声明，值不能改变</li><li>复合类型变量，变量名指向地址</li></ul><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h3><blockquote><p>[a, b] = [b, a]</p></blockquote><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><blockquote><p>var { foo, bar } = { foo: ‘aaa’, bar: ‘bbb’ }</p></blockquote><h3 id="字符串的解构"><a href="#字符串的解构" class="headerlink" title="字符串的解构"></a>字符串的解构</h3><blockquote><p>const [a, b, c, d, e] = ‘bowen’</p></blockquote><h3 id="数值和布尔值的解构"><a href="#数值和布尔值的解构" class="headerlink" title="数值和布尔值的解构"></a>数值和布尔值的解构</h3><blockquote><p>let {toString: s} = 123</p></blockquote><h3 id="函数参数的解构"><a href="#函数参数的解构" class="headerlink" title="函数参数的解构"></a>函数参数的解构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function add([<span class="selector-tag">a</span>, b]) &#123;</span><br><span class="line">    return <span class="selector-tag">a</span> + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><p>JavaScript内部，字符以UTF-16的格式存储，每个字符固定为2字节</p><h3 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h3><h3 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h3><h3 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h3><h3 id="normalize"><a href="#normalize" class="headerlink" title="normalize()"></a>normalize()</h3><h3 id="includes-，startsWith-，endsWith"><a href="#includes-，startsWith-，endsWith" class="headerlink" title="includes()，startsWith()，endsWith()"></a>includes()，startsWith()，endsWith()</h3><p>对应indexOf方法，接收第二个参数表示开始搜索的位置</p><ul><li><p>includes()</p><p>  返回布尔值，表示是否找到参数字符串</p></li><li><p>startsWith()</p><p>  返回布尔值，表示参数字符串是否在源字符串头部</p></li><li><p>endsWith()</p><p>  返回布尔值，表示参数字符串是否在源字符串尾部</p></li></ul><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>参数是数字</p><ul><li>小数会被取整</li><li>负数或Infinity会报错</li><li>0到-1之间的小数等同于0</li><li>NaN等同于0</li><li>字符串先被转换为数字</li></ul><h3 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h3><p>字符串补全</p><ul><li>第一个参数用来指定字符串最小长度</li><li>第二个参数用来补全，缺省则用空格补全</li></ul><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote><p>`i am ${name}`</p></blockquote><h3 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h3><h2 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h2><h3 id="RegExp-构造函数"><a href="#RegExp-构造函数" class="headerlink" title="RegExp 构造函数"></a>RegExp 构造函数</h3><h3 id="字符串的正则方法"><a href="#字符串的正则方法" class="headerlink" title="字符串的正则方法"></a>字符串的正则方法</h3><ul><li>match()</li><li>replace()</li><li>search()</li><li>split()</li></ul><h3 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h3><h3 id="y修饰符，sticky属性"><a href="#y修饰符，sticky属性" class="headerlink" title="y修饰符，sticky属性"></a>y修饰符，sticky属性</h3><p>sticky属性表示是否设置了y修饰符</p><h3 id="flags属性"><a href="#flags属性" class="headerlink" title="flags属性"></a>flags属性</h3><p>返回正则表达式的修饰符</p><h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let-amp-const&quot;&gt;&lt;a href=&quot;#let-amp-const&quot; class=&quot;headerlink&quot; title=&quot;let &amp;amp; const&quot;&gt;&lt;/a&gt;let &amp;amp; const&lt;/h2&gt;&lt;p&gt;声明变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只在其代码块有效&lt;/li&gt;
&lt;li&gt;不存在变量提升&lt;/li&gt;
&lt;li&gt;&lt;p&gt;暂时性死区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暂时性死区：如果区块中存在let和const命令，这个区块对这些命令声明的变量从一开始就形成封闭的作用域&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ReferenceError&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不允许重复声明&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="es6" scheme="http://www.ss1742.com/categories/es6/"/>
    
      <category term="前端" scheme="http://www.ss1742.com/categories/es6/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="es6" scheme="http://www.ss1742.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>grunt</title>
    <link href="http://www.ss1742.com/2017/05/26/grunt-watch/"/>
    <id>http://www.ss1742.com/2017/05/26/grunt-watch/</id>
    <published>2017-05-26T13:16:14.000Z</published>
    <updated>2017-06-14T02:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><a id="more"></a><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="keyword">function</span>(grunt) &#123;</span><br><span class="line"></span><br><span class="line">    // 配置</span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg : grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">        uglify : &#123;</span><br><span class="line">            options : &#123;</span><br><span class="line">                banner : <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd HH:MM:ss") %&gt; */\n'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            build : &#123;</span><br><span class="line">                options: &#123;</span><br><span class="line">                    mangle: false</span><br><span class="line">                &#125;,</span><br><span class="line">                files: &#123;</span><br><span class="line">                    <span class="string">'build/app.min.js'</span>: [</span><br><span class="line">                        <span class="string">'app/*.js'</span>, <span class="string">'app/*/*.js'</span>, <span class="string">'app/*/*/*.js'</span>, <span class="string">'app/*/*/*/*.js'</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        less: &#123;</span><br><span class="line">            compile: &#123;</span><br><span class="line">                options: &#123;</span><br><span class="line">                    paths: [<span class="string">"app/app/css"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                files: &#123;</span><br><span class="line">                    <span class="string">"build/style.css"</span>: <span class="string">"app/css/main.less"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            scripts: &#123;</span><br><span class="line">                files: [<span class="string">'app/css/*.less'</span>, <span class="string">'app/*.js'</span>, <span class="string">'app/*/*.js'</span>, <span class="string">'app/*/*/*.js'</span>, <span class="string">'app/*/*/*/*.js'</span>],</span><br><span class="line">                tasks: [<span class="string">'less'</span>, <span class="string">'uglify'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 载入uglify插件</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line"></span><br><span class="line">    // less</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-less'</span>);</span><br><span class="line"></span><br><span class="line">    // watch</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line"></span><br><span class="line">    // 注册任务</span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>, <span class="string">'less'</span>, <span class="string">'watch'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ul><li><p><code>initConfig uglify</code></p><p>  <code>build</code> 通过 <code>*</code> 通配文件，并将js压缩，结果存放到 <code>build/app.min.js</code></p></li><li><p><code>initConfig less</code></p><p>  <code>compile</code> 直接将  <code>main.less</code> 文件通过 <code>grunt-contrib-less</code> 转换为 <code>css</code>，在 <code>main.less</code> 中通过 <code>import</code> 导入的文件也会被转换，最终生成一个 <code>css</code> 文件为 <code>build/app.min.js</code></p></li><li><p><code>initConfig watch</code></p><p>  <code>scripts watch</code> 通过  <code>*</code> 通配变化的文件，若文件内容发生变化，会执行 <code>uglify</code> 和 <code>less</code> 这两个 <code>tasks</code></p></li><li><p>插件</p><ul><li><code>grunt.loadNpmTasks(‘grunt-contrib-uglify’);</code></li><li><code>grunt.loadNpmTasks(‘grunt-contrib-less’);</code></li><li><code>grunt.loadNpmTasks(‘grunt-contrib-watch’);</code></li></ul></li><li><p>注册</p><p>  配置完成之后执行注册任务</p><blockquote><p><code>grunt.registerTask(‘default’, [‘uglify’, ‘less’, ‘watch’]);</code></p></blockquote></li></ul><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"grunt"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"grunt"</span>: <span class="string">"~0.4.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-concat"</span>: <span class="string">"~0.2.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-jshint"</span>: <span class="string">"~0.6.5"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-less"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.7"</span>,</span><br><span class="line">    <span class="attr">"grunt-contrib-watch"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"grunt-jsdoc"</span>: <span class="string">"^2.1.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>Q: <code>grunt: watch ENOSPC</code></p><p>A: <code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;
    
    </summary>
    
      <category term="webpack-grunt-glup" scheme="http://www.ss1742.com/categories/webpack-grunt-glup/"/>
    
    
      <category term="grunt" scheme="http://www.ss1742.com/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>http-proxy-middleware代理前端系统</title>
    <link href="http://www.ss1742.com/2017/05/04/http-proxy-middleware/"/>
    <id>http://www.ss1742.com/2017/05/04/http-proxy-middleware/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-06-14T01:53:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>npm install –save-dev http-proxy-middleware</p></blockquote><a id="more"></a><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>使用 express 搭建服务器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyTable = <span class="keyword">require</span>(<span class="string">'./proxy/proxy'</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy api requests</span></span><br><span class="line"><span class="comment">// 顺序必须在 bodyParser 之前！！！</span></span><br><span class="line">Object.keys(proxyTable).<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = proxyTable[context]</span><br><span class="line">  <span class="keyword">if</span> (typeof options === <span class="string">'string'</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      target: options</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  app.<span class="keyword">use</span>(proxy(options.filter || context, options));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>proxy/proxy.js 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里只提供基本用法 , 更多配置请参考 http-proxy-middleware readme</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://yourUrl:port1/'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'/auth'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://yourUrl:port2/'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/auth'</span>: <span class="string">'/auth'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onProxyReq: <span class="function"><span class="keyword">function</span>(<span class="params">proxyReq, req, res</span>) </span>&#123;</span><br><span class="line">      proxyReq.setHeader(<span class="string">'add'</span>, <span class="string">'xx'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工具手架"><a href="#工具手架" class="headerlink" title="工具手架"></a>工具手架</h4><p>如果你是想要直接将前端代码跑起来，node-1742 是我提供了一个可以使用 npm 获取并开箱即用的包。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 1. 下载</span><br><span class="line">npm install -g node-1742</span><br><span class="line"></span><br><span class="line">// 2. 命令生成</span><br><span class="line">// *<span class="built_in"> new </span>folder</span><br><span class="line">node-1742 init new-folder</span><br><span class="line">cd new-folder</span><br><span class="line"></span><br><span class="line">// * exist folder</span><br><span class="line">cd exist-folder</span><br><span class="line">node-1742 init</span><br><span class="line"></span><br><span class="line">// 3. 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">// 4. 在 proxy/proxy.js 中配置代理</span><br><span class="line"></span><br><span class="line">// 5. 将前端文件放入<span class="keyword"> public</span> 文件夹中，入口为<span class="keyword"> public</span>/index.html</span><br><span class="line"></span><br><span class="line">// 6. 运行</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h4><blockquote><p>通过 ajax 发送的请求后台接收不到 data ？</p></blockquote><p>错误原因：</p><p>app.use(bodyParser.json());</p><p>app.use(bodyParser.urlencoded({ extended: false }));</p><p>将数据做了处理。</p><p>解决办法：</p><p>将 proxy 的 order 提到 bodyParser 之前</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>github : <a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a></p><p>vue-cli : config/index.js proxyTable &amp;&amp; build/dev-server.js</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;npm install –save-dev http-proxy-middleware&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="proxy" scheme="http://www.ss1742.com/tags/proxy/"/>
    
      <category term="express" scheme="http://www.ss1742.com/tags/express/"/>
    
      <category term="node" scheme="http://www.ss1742.com/tags/node/"/>
    
      <category term="javascript" scheme="http://www.ss1742.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>常用算法</title>
    <link href="http://www.ss1742.com/2017/04/10/algorithm/"/>
    <id>http://www.ss1742.com/2017/04/10/algorithm/</id>
    <published>2017-04-09T16:00:00.000Z</published>
    <updated>2017-06-14T01:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法（Algorithm）是指解决问题的一种方法或一个过程。严格地讲，算法是由若干条指令组成的有穷序列。对于计算机科学（当然包括软件工程）来说，算法的概念至关重要。计算机软硬件的一切问题几乎都能落实到具体的算法。只有设计出巧妙的算法，写出程序，才能解决千变万化的问题。</p><a id="more"></a><h4 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h4><blockquote><p>枚举法</p></blockquote><p>又称穷举法，指的是从可能的解的集合中一一枚举各元素，用给定的检验条件判定哪些无用哪些有用。能使命题成立的，即为其解。这是最直观，也是最容易想到的算法。</p><p>枚举法的特点是算法简单，但比较原始、笨拙，运算量大、算法复杂度呈指数级是它的弱点。但是如果能够在具体问题中排除明显不属于解集的元素，在局部地方使用枚举法，其效果会十分显著。</p><blockquote><p>递归法</p></blockquote><p>相信大家对递归都不陌生，像是经典的汉诺塔问题、斐波拉契数列问题、排列问题等，都可以用递归法求解。</p><p>递归算法从自身出发，通过不断调用同名方法到达边界条件从而得到问题的解。因此，递归算法常常使用系统堆栈，使得算法的效率较低，费时和费内存空间。但是递归却能使一个蕴涵递归关系且结构复杂的程序简洁精练，增加可读性。</p><blockquote><p>贪心法</p></blockquote><p>从问题的某一个初始解出发，向给定的目标递推。推进的每一步做一个当时看似最佳的贪心选择，不断地将问题实例归纳为更小的相似的子问题，并期望通过所做的局部最优选择产生出一个全局最优解。</p><p>关于贪心算法的实例，有背包问题、任务时间表问题等，大家可以在实例中具体体会贪心算法。</p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><blockquote><p>动态规划</p></blockquote><p>动态规划（Dynamic Programming，DP）是一种重要的程序设计思想。所谓“动态”，指的是在问题的多阶段决策中，按某一顺序，根据每一步所选决策的不同，将随即引起状态的转移，最终在变化的状态中产生一个决策序列。动态规划就是为了使产生的决策序列在某种条件下达到最优。</p><p>通常能够用动态规划解决的问题，往往是最优化问题，且问题的最优解的局部往往是局部问题在相应条件下的最优解，而且问题的最优解与其子问题的最优解要有一定的关联，要能建立递推关系。</p><p>动态规划算法又包括线性动态规划、树形动态规划、概率动态规划和动态规划中的状态压缩等几个方面。</p><blockquote><p>搜索算法</p></blockquote><p>这是利用计算机的性能优势来有目的地枚举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。在问题求解过程中，人们所面临的大多数现实问题往往没有确定性的算法，需要通过搜索算法来解决。</p><p>搜索算法一般包括两个重要的问题：搜索什么和在哪里搜索。因此，搜索一般分为两个阶段：状态空间的生成阶段和在该状态空间中对所求问题状态的搜索。一般来说，根据是否使用启发式信息将搜索算法分为盲目搜索和启发式搜索。</p><p>盲目搜索不考虑问题本身的特性，效率不高，所以一般需要寻找合理的搜索策略，改变搜索顺序。盲目搜索法中经典的两种是深度优先搜索（Depth First Search，DFS）和广度优先搜索（Breadth First Search，BFS）。</p><p>而启发式搜索是在搜索过程中加入了与问题有关的启发式信息，用于指导搜索朝着最有希望的方向前进，扫除不必要的搜索过程，加速问题求解并得到最优解。常见的有A*算法、蚁群算法、遗传算法、模拟退火算法等。</p><blockquote><p>图算法</p></blockquote><p>图算法在计算机科学中扮演着很重要的角色，它提供了对很多问题都有效的一种简单而系统的建模方式。很多问题都可以转化为图论问题，然后用图论的基本算法加以解决。</p><p>图算法研究的基本领域：最短路、生成树、连通性、网络流、匹配等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法（Algorithm）是指解决问题的一种方法或一个过程。严格地讲，算法是由若干条指令组成的有穷序列。对于计算机科学（当然包括软件工程）来说，算法的概念至关重要。计算机软硬件的一切问题几乎都能落实到具体的算法。只有设计出巧妙的算法，写出程序，才能解决千变万化的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://www.ss1742.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>angular1文件上传</title>
    <link href="http://www.ss1742.com/2017/04/02/use_form_data_to_upload_file/"/>
    <id>http://www.ss1742.com/2017/04/02/use_form_data_to_upload_file/</id>
    <published>2017-04-01T16:19:14.000Z</published>
    <updated>2017-04-10T04:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Q: post上传文件并带参数。</p><p>A: 解决方法有很多种，常用form表单。我们主要说使用 angular1 发送 ajax 。</p></blockquote><h5 id="1-angular1-http-post"><a href="#1-angular1-http-post" class="headerlink" title="1. angular1 $http.post"></a>1. angular1 $http.post</h5><p>后台需要传过去一个文件列表，传给后台 form-data</p><ul><li>文件 list name 为 file</li><li>参数 name 为 type</li></ul><a id="more"></a><p>在服务中封装了一个方法，相同的需求就只需要调用 http_form_file_data 方法。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这一步非常重要</span><br><span class="line"> * 设置 Content-<span class="keyword">Type</span> <span class="type">为 </span>undefined ，浏览器会自动填充</span><br><span class="line"> * ！！！千万不要设置 Content-<span class="keyword">Type</span> <span class="type">为 </span>multipart/form-data !!!</span><br><span class="line"> * /</span><br><span class="line">var postCfgFile = &#123;</span><br><span class="line"></span><br><span class="line">headers: &#123;<span class="symbol">'Content</span>-<span class="keyword">Type</span>': undefined&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回函数本身的第一个参数</span><br><span class="line"> * /</span><br><span class="line">transformRequest: angular.identity</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * post form data格式的带文件数据</span><br><span class="line"> * @param str</span><br><span class="line"> * @param obj obj是一个自定义对象，</span><br><span class="line"> * @returns &#123;Promise&#125;</span><br><span class="line"> */</span><br><span class="line">http_form_file_data: <span class="keyword">function</span> <span class="title"></span>(str, obj) &#123;</span><br><span class="line"></span><br><span class="line">var deferred = $q.defer();</span><br><span class="line"></span><br><span class="line">var data = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">angular.forEach(obj, <span class="keyword">function</span> <span class="title"></span>(value, key) &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件的 key 是 file ，多个文件需要全部 append 到 FormData 里</span><br><span class="line">if (key == 'file') &#123;</span><br><span class="line"></span><br><span class="line">angular.forEach(value, <span class="keyword">function</span> <span class="title"></span>(file) &#123;</span><br><span class="line"></span><br><span class="line">data.append(key, file);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.append(key, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http</span><br><span class="line">.post(str, data, postCfgFile)</span><br><span class="line">.success(<span class="keyword">function</span> <span class="title"></span>(data) &#123;</span><br><span class="line"></span><br><span class="line">deferred.resolve(data);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> deferred.promise;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置 Content-Type 为 multipart/form-data ，后台会抛出 the current request boundary parameter is null 异常。</p><p>html中一般喜欢这样写，使用其他的样式来避免input[file]样式上的不足。（框架洁癖者请绕行）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">ng-model</span>=<span class="string">"uploadData.type"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">&lt;a href <span class="attribute">class</span>=<span class="string">"file-upload"</span> <span class="attribute">onclick</span>=<span class="string">"<span class="variable">$('#files')</span>.trigger('click')"</span>&gt;上传附件&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"file"</span> <span class="attribute">id</span>=<span class="string">"files"</span> <span class="attribute">onchange</span>=<span class="string">"angular.element(this).scope().chooseFile(event)"</span> <span class="attribute">style</span>=<span class="string">"display: none;"</span> multiple&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>咱们控制器中通过 event 来将文件拿到，再 push 到数组中，这样可以添加多个文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 选择文件</span><br><span class="line"> * /</span><br><span class="line">$scope.chooseFile = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">var files = event.target.files;</span><br><span class="line"></span><br><span class="line">angular.forEach(files, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">$timeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">$scope.uploadData.file.push(file);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除文件</span><br><span class="line"> * /</span><br><span class="line">$scope.deleteFile = <span class="function"><span class="keyword">function</span> <span class="params">(item)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">var index = $scope.uploadData.file.indexOf(item);</span><br><span class="line"></span><br><span class="line">$scope.uploadData.file.splice(index, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 上传</span><br><span class="line"> * /</span><br><span class="line">$scope.upload = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * httpServer 封装在服务中</span><br><span class="line"> * postUpload 执行 http_form_file_data 方法，并将 data 传过去</span><br><span class="line"> * /</span><br><span class="line">httpServer</span><br><span class="line">.postUpload($scope.uploadData)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(result)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="http://omu1mo64e.bkt.clouddn.com/2017-4-3-01.png" alt=""></p><p><img src="http://omu1mo64e.bkt.clouddn.com/2017-4-3-02.png" alt=""></p><h5 id="2-angular-file-upload"><a href="#2-angular-file-upload" class="headerlink" title="2.angular-file-upload"></a>2.angular-file-upload</h5><p>我们使用了很多的 angular-file-upload 来处理之前的上传，非常的好用，唯一麻烦的就是需要写很多的回调函数。详细使用参考 <a href="https://github.com/nervgh/angular-file-upload" target="_blank" rel="noopener">angular-file-upload</a></p><h5 id="3-form表单"><a href="#3-form表单" class="headerlink" title="3.form表单"></a>3.form表单</h5><p>使用表单是一个比较通用并且简单的方法，这里不详细说明。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">from</span> <span class="built_in">name</span>=<span class="string">"upload"</span> <span class="built_in">action</span>=<span class="string">"url"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> <span class="built_in">name</span>=<span class="string">"style"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> <span class="built_in">name</span>=<span class="string">"file"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">from</span>&gt;</span><br></pre></td></tr></table></figure><p>其他问题请联系作者：1742</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Q: post上传文件并带参数。&lt;/p&gt;
&lt;p&gt;A: 解决方法有很多种，常用form表单。我们主要说使用 angular1 发送 ajax 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1-angular1-http-post&quot;&gt;&lt;a href=&quot;#1-angular1-http-post&quot; class=&quot;headerlink&quot; title=&quot;1. angular1 $http.post&quot;&gt;&lt;/a&gt;1. angular1 $http.post&lt;/h5&gt;&lt;p&gt;后台需要传过去一个文件列表，传给后台 form-data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件 list name 为 file&lt;/li&gt;
&lt;li&gt;参数 name 为 type&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angular1" scheme="http://www.ss1742.com/tags/angular1/"/>
    
      <category term="file-upload" scheme="http://www.ss1742.com/tags/file-upload/"/>
    
      <category term="form-data" scheme="http://www.ss1742.com/tags/form-data/"/>
    
  </entry>
  
  <entry>
    <title>hexo 简易教程</title>
    <link href="http://www.ss1742.com/2017/03/26/hexo/"/>
    <id>http://www.ss1742.com/2017/03/26/hexo/</id>
    <published>2017-03-26T13:16:14.000Z</published>
    <updated>2017-06-14T01:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo-使用教程"><a href="#hexo-使用教程" class="headerlink" title="hexo 使用教程"></a>hexo 使用教程</h3><hr><p>详见：<a href="https://hexo.io/zh-cn" target="_blank" rel="noopener">hexo官方教程</a></p><hr><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><blockquote><p>new </p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章</p><blockquote><p>generate</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br><span class="line">$ hexo g (简写)</span><br></pre></td></tr></table></figure><p>生成静态文件</p><blockquote><p>server</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>启动服务器(默认4000端口)</p><blockquote><p>deploy</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d (简写)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g (部署之前预先生成静态文件)</span></span><br></pre></td></tr></table></figure><p>部署网站</p><blockquote><p>clean</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure><p>清除缓存文件和已生成的静态文件</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo-使用教程&quot;&gt;&lt;a href=&quot;#hexo-使用教程&quot; class=&quot;headerlink&quot; title=&quot;hexo 使用教程&quot;&gt;&lt;/a&gt;hexo 使用教程&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;详见：&lt;a href=&quot;https://hexo.io/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo官方教程&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install -g hexo-cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.ss1742.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计</title>
    <link href="http://www.ss1742.com/2016/06/01/scu-g/"/>
    <id>http://www.ss1742.com/2016/06/01/scu-g/</id>
    <published>2016-05-31T16:00:00.000Z</published>
    <updated>2017-06-14T01:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h2><p>收拾整理为知笔记，这里将毕业设计的部分笔记写成博客后移除为知笔记。</p><a id="more"></a><h3 id="关于毕业设计"><a href="#关于毕业设计" class="headerlink" title="关于毕业设计"></a>关于毕业设计</h3><p>毕业设计我做的是基于数据分析的高考志愿填报系统。</p><p>Q:为何基于数据分析？</p><p>A:因为只有十年间的高考数据可以和仅能作为参考。算不上数据挖掘。</p><p>Q:使用到的技术？</p><p>A:我是前端开发工程师。技术栈前端使用<code>angularjs1</code> 框架，后台接口使用 <code>express</code> 框架，数据库 <code>mysql</code> 。系统最主要的模型是斗斗学姐通过多元线性回归做的，我只需要将模型转换为code就可以了。</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><ul><li><p><code>request</code></p><blockquote><p>request(url, function (error, response, body) {}</p></blockquote></li><li><p><code>cheerio</code></p><blockquote><p>var $ = cheerio.load(body.data);</p></blockquote></li></ul><h4 id="express"><a href="#express" class="headerlink" title="express"></a>express</h4><ul><li><p>新建 <code>express</code></p><blockquote><p>express app</p></blockquote></li><li><p>配置端口</p>  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">set</span>(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line">app.listen(app.<span class="keyword">get</span>(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">    console.log(<span class="string">'Express server listening on port '</span> + app.<span class="keyword">get</span>(<span class="string">'port'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>设置模板引擎</p>  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> ejs = <span class="keyword">require</span>(<span class="string">'ejs'</span>);</span><br><span class="line">app.<span class="built_in">set</span>(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</span><br><span class="line">app.engine(<span class="string">'.html'</span>, ejs.__express);</span><br><span class="line">app.<span class="built_in">set</span>(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用静态文件</p><blockquote><p>app.use(express.static(‘app’));</p></blockquote></li></ul><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><ul><li><p>配置 <code>mysql</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> HOST = <span class="string">'localhost'</span>,</span><br><span class="line">    PORT = <span class="string">'3306'</span>,</span><br><span class="line">    MYSQL_USER = <span class="string">'root'</span>,</span><br><span class="line">    MYSQL_PASS = <span class="string">'123456'</span>,</span><br><span class="line">    DATABASE = <span class="string">'scu'</span>,</span><br><span class="line">    CHARSET = <span class="string">'UTF8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    host: HOST,</span><br><span class="line">    port: PORT,</span><br><span class="line">    user: MYSQL_USER,</span><br><span class="line">    password: MYSQL_PASS,</span><br><span class="line">    charset: CHARSET</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>连接 <code>mysql</code> 回调</p>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var Connect = <span class="function"><span class="keyword">function</span><span class="params">(sql, sql_params)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    var mysql = _mysql.createConnection(<span class="built_in">config</span>);</span><br><span class="line">    mysql.query(<span class="string">'use '</span> + DATABASE, <span class="function"><span class="keyword">function</span><span class="params">(error, results)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">error</span>) &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">'ClientConnectionReady Error: '</span> + <span class="built_in">error</span>.message);</span><br><span class="line">            mysql.<span class="keyword">end</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mysql.query(sql,sql_params,<span class="function"><span class="keyword">function</span> <span class="params">(err, result)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">'ERROR] - '</span>,err.message);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mysql.<span class="keyword">end</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;毕业设计&quot;&gt;&lt;a href=&quot;#毕业设计&quot; class=&quot;headerlink&quot; title=&quot;毕业设计&quot;&gt;&lt;/a&gt;毕业设计&lt;/h2&gt;&lt;p&gt;收拾整理为知笔记，这里将毕业设计的部分笔记写成博客后移除为知笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="scu" scheme="http://www.ss1742.com/categories/scu/"/>
    
    
      <category term="express" scheme="http://www.ss1742.com/tags/express/"/>
    
      <category term="node" scheme="http://www.ss1742.com/tags/node/"/>
    
      <category term="mysql" scheme="http://www.ss1742.com/tags/mysql/"/>
    
  </entry>
  
</feed>
