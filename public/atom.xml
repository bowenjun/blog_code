<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1742@xxs的个人博客</title>
  <subtitle>笔者人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ss1742.com/"/>
  <updated>2017-05-05T06:47:15.000Z</updated>
  <id>http://www.ss1742.com/</id>
  
  <author>
    <name>1742</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http-proxy-middleware代理前端系统</title>
    <link href="http://www.ss1742.com/2017/05/04/http-proxy-middleware/"/>
    <id>http://www.ss1742.com/2017/05/04/http-proxy-middleware/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-05-05T06:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote>
<p>npm install –save-dev http-proxy-middleware</p>
</blockquote>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>使用 express 搭建服务器</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">var</span> proxyTable = <span class="keyword">require</span>(<span class="string">'./proxy/proxy'</span>);</div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">require</span>(<span class="string">'http-proxy-middleware'</span>);</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// proxy api requests</span></div><div class="line"><span class="comment">// 顺序必须在 bodyParser 之前！！！</span></div><div class="line">Object.keys(proxyTable).<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(context)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> options = proxyTable[context]</div><div class="line">  <span class="keyword">if</span> (typeof options === <span class="string">'string'</span>) &#123;</div><div class="line">    options = &#123;</div><div class="line">      target: options</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  app.<span class="keyword">use</span>(proxy(options.filter || context, options));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>proxy/proxy.js 配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里只提供基本用法 , 更多配置请参考 http-proxy-middleware readme</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">'/api'</span>: &#123;</div><div class="line">    <span class="attr">target</span>: <span class="string">'http://yourUrl:port1/'</span>,</div><div class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">pathRewrite</span>: &#123;</div><div class="line">      <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/auth'</span>: &#123;</div><div class="line">    <span class="attr">target</span>: <span class="string">'http://yourUrl:port2/'</span>,</div><div class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">pathRewrite</span>: &#123;</div><div class="line">      <span class="string">'^/auth'</span>: <span class="string">'/auth'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">onProxyReq</span>: <span class="function"><span class="keyword">function</span>(<span class="params">proxyReq, req, res</span>) </span>&#123;</div><div class="line">      proxyReq.setHeader(<span class="string">'add'</span>, <span class="string">'xx'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="工具手架"><a href="#工具手架" class="headerlink" title="工具手架"></a>工具手架</h4><p>如果你是想要直接将前端代码跑起来，node-1742 是我提供了一个可以使用 npm 获取并开箱即用的包。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 1. 下载</div><div class="line">npm install -g node-1742</div><div class="line"></div><div class="line">// 2. 命令生成</div><div class="line">// *<span class="built_in"> new </span>folder</div><div class="line">node-1742 init<span class="built_in"> new-folder</span></div><div class="line">cd<span class="built_in"> new-folder</span></div><div class="line"></div><div class="line">// * exist folder</div><div class="line">cd exist-folder</div><div class="line">node-1742 init</div><div class="line"></div><div class="line">// 3. 安装依赖</div><div class="line">npm install</div><div class="line"></div><div class="line">// 4. 在 proxy/proxy.js 中配置代理</div><div class="line"></div><div class="line">// 5. 将前端文件放入<span class="keyword"> public</span> 文件夹中，入口为<span class="keyword"> public</span>/index.html</div><div class="line"></div><div class="line">// 6. 运行</div><div class="line">npm start</div></pre></td></tr></table></figure>
<h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h4><blockquote>
<p>通过 ajax 发送的请求后台接收不到 data ？</p>
</blockquote>
<p>错误原因：</p>
<p>app.use(bodyParser.json());</p>
<p>app.use(bodyParser.urlencoded({ extended: false }));</p>
<p>将数据做了处理。</p>
<p>解决办法：</p>
<p>将 proxy 的 order 提到 bodyParser 之前</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>github : <a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a></p>
<p>vue-cli : config/index.js proxyTable &amp;&amp; build/dev-server.js</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;npm install –save-dev http-proxy-middleware&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;使用 express 搭建服务器&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proxyTable = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./proxy/proxy&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proxy = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http-proxy-middleware&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// proxy api requests&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 顺序必须在 bodyParser 之前！！！&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Object.keys(proxyTable).&lt;span class=&quot;keyword&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = proxyTable[context]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof options === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      target: options&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(proxy(options.filter || context, options));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;proxy/proxy.js 配置&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里只提供基本用法 , 更多配置请参考 http-proxy-middleware readme&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;/api&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;http://yourUrl:port1/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;changeOrigin&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;pathRewrite&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;^/api&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;/auth&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;http://yourUrl:port2/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;changeOrigin&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;pathRewrite&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;^/auth&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;/auth&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;onProxyReq&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;proxyReq, req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      proxyReq.setHeader(&lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;xx&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="proxy" scheme="http://www.ss1742.com/tags/proxy/"/>
    
      <category term="express" scheme="http://www.ss1742.com/tags/express/"/>
    
      <category term="node" scheme="http://www.ss1742.com/tags/node/"/>
    
      <category term="javascript" scheme="http://www.ss1742.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue2学习纪要</title>
    <link href="http://www.ss1742.com/2017/04/14/vue2/"/>
    <id>http://www.ss1742.com/2017/04/14/vue2/</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2017-05-04T02:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://cn.vuejs.org/v2/guide" target="_blank" rel="external">vue2官网</a></p>
<h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ul>
<li>v-for</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://cn.vuejs.org/v2/guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue2官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
    
      <category term="vue" scheme="http://www.ss1742.com/tags/vue/"/>
    
      <category term="vue2" scheme="http://www.ss1742.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>常用算法</title>
    <link href="http://www.ss1742.com/2017/04/10/algorithm/"/>
    <id>http://www.ss1742.com/2017/04/10/algorithm/</id>
    <published>2017-04-09T16:00:00.000Z</published>
    <updated>2017-04-10T04:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法（Algorithm）是指解决问题的一种方法或一个过程。严格地讲，算法是由若干条指令组成的有穷序列。对于计算机科学（当然包括软件工程）来说，算法的概念至关重要。计算机软硬件的一切问题几乎都能落实到具体的算法。只有设计出巧妙的算法，写出程序，才能解决千变万化的问题。</p>
<h4 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h4><blockquote>
<p>枚举法</p>
</blockquote>
<p>又称穷举法，指的是从可能的解的集合中一一枚举各元素，用给定的检验条件判定哪些无用哪些有用。能使命题成立的，即为其解。这是最直观，也是最容易想到的算法。</p>
<p>枚举法的特点是算法简单，但比较原始、笨拙，运算量大、算法复杂度呈指数级是它的弱点。但是如果能够在具体问题中排除明显不属于解集的元素，在局部地方使用枚举法，其效果会十分显著。</p>
<a id="more"></a>
<blockquote>
<p>递归法</p>
</blockquote>
<p>相信大家对递归都不陌生，像是经典的汉诺塔问题、斐波拉契数列问题、排列问题等，都可以用递归法求解。</p>
<p>递归算法从自身出发，通过不断调用同名方法到达边界条件从而得到问题的解。因此，递归算法常常使用系统堆栈，使得算法的效率较低，费时和费内存空间。但是递归却能使一个蕴涵递归关系且结构复杂的程序简洁精练，增加可读性。</p>
<blockquote>
<p>贪心法</p>
</blockquote>
<p>从问题的某一个初始解出发，向给定的目标递推。推进的每一步做一个当时看似最佳的贪心选择，不断地将问题实例归纳为更小的相似的子问题，并期望通过所做的局部最优选择产生出一个全局最优解。</p>
<p>关于贪心算法的实例，有背包问题、任务时间表问题等，大家可以在实例中具体体会贪心算法。</p>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><blockquote>
<p>动态规划</p>
</blockquote>
<p>动态规划（Dynamic Programming，DP）是一种重要的程序设计思想。所谓“动态”，指的是在问题的多阶段决策中，按某一顺序，根据每一步所选决策的不同，将随即引起状态的转移，最终在变化的状态中产生一个决策序列。动态规划就是为了使产生的决策序列在某种条件下达到最优。</p>
<p>通常能够用动态规划解决的问题，往往是最优化问题，且问题的最优解的局部往往是局部问题在相应条件下的最优解，而且问题的最优解与其子问题的最优解要有一定的关联，要能建立递推关系。</p>
<p>动态规划算法又包括线性动态规划、树形动态规划、概率动态规划和动态规划中的状态压缩等几个方面。</p>
<blockquote>
<p>搜索算法</p>
</blockquote>
<p>这是利用计算机的性能优势来有目的地枚举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。在问题求解过程中，人们所面临的大多数现实问题往往没有确定性的算法，需要通过搜索算法来解决。</p>
<p>搜索算法一般包括两个重要的问题：搜索什么和在哪里搜索。因此，搜索一般分为两个阶段：状态空间的生成阶段和在该状态空间中对所求问题状态的搜索。一般来说，根据是否使用启发式信息将搜索算法分为盲目搜索和启发式搜索。</p>
<p>盲目搜索不考虑问题本身的特性，效率不高，所以一般需要寻找合理的搜索策略，改变搜索顺序。盲目搜索法中经典的两种是深度优先搜索（Depth First Search，DFS）和广度优先搜索（Breadth First Search，BFS）。</p>
<p>而启发式搜索是在搜索过程中加入了与问题有关的启发式信息，用于指导搜索朝着最有希望的方向前进，扫除不必要的搜索过程，加速问题求解并得到最优解。常见的有A*算法、蚁群算法、遗传算法、模拟退火算法等。</p>
<blockquote>
<p>图算法</p>
</blockquote>
<p>图算法在计算机科学中扮演着很重要的角色，它提供了对很多问题都有效的一种简单而系统的建模方式。很多问题都可以转化为图论问题，然后用图论的基本算法加以解决。</p>
<p>图算法研究的基本领域：最短路、生成树、连通性、网络流、匹配等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法（Algorithm）是指解决问题的一种方法或一个过程。严格地讲，算法是由若干条指令组成的有穷序列。对于计算机科学（当然包括软件工程）来说，算法的概念至关重要。计算机软硬件的一切问题几乎都能落实到具体的算法。只有设计出巧妙的算法，写出程序，才能解决千变万化的问题。&lt;/p&gt;
&lt;h4 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;headerlink&quot; title=&quot;基础算法&quot;&gt;&lt;/a&gt;基础算法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;枚举法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又称穷举法，指的是从可能的解的集合中一一枚举各元素，用给定的检验条件判定哪些无用哪些有用。能使命题成立的，即为其解。这是最直观，也是最容易想到的算法。&lt;/p&gt;
&lt;p&gt;枚举法的特点是算法简单，但比较原始、笨拙，运算量大、算法复杂度呈指数级是它的弱点。但是如果能够在具体问题中排除明显不属于解集的元素，在局部地方使用枚举法，其效果会十分显著。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://www.ss1742.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>angular1文件上传</title>
    <link href="http://www.ss1742.com/2017/04/02/use_form_data_to_upload_file/"/>
    <id>http://www.ss1742.com/2017/04/02/use_form_data_to_upload_file/</id>
    <published>2017-04-01T16:19:14.000Z</published>
    <updated>2017-04-10T04:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Q: post上传文件并带参数。</p>
<p>A: 解决方法有很多种，常用form表单。我们主要说使用 angular1 发送 ajax 。</p>
</blockquote>
<h5 id="1-angular1-http-post"><a href="#1-angular1-http-post" class="headerlink" title="1. angular1 $http.post"></a>1. angular1 $http.post</h5><p>后台需要传过去一个文件列表，传给后台 form-data</p>
<ul>
<li>文件 list name 为 file</li>
<li>参数 name 为 type</li>
</ul>
<a id="more"></a>
<p>在服务中封装了一个方法，相同的需求就只需要调用 http_form_file_data 方法。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 这一步非常重要</div><div class="line"> * 设置 Content-<span class="keyword">Type</span> <span class="type">为 </span>undefined ，浏览器会自动填充</div><div class="line"> * ！！！千万不要设置 Content-<span class="keyword">Type</span> <span class="type">为 </span>multipart/form-data !!!</div><div class="line"> * /</div><div class="line">var postCfgFile = &#123;</div><div class="line"></div><div class="line">	headers: &#123;<span class="symbol">'Content</span>-<span class="keyword">Type</span>': undefined&#125;,</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 返回函数本身的第一个参数</div><div class="line">	 * /</div><div class="line">	transformRequest: angular.identity</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * post form data格式的带文件数据</div><div class="line"> * @param str</div><div class="line"> * @param obj obj是一个自定义对象，</div><div class="line"> * @returns &#123;Promise&#125;</div><div class="line"> */</div><div class="line">http_form_file_data: <span class="keyword">function</span> <span class="title"></span>(str, obj) &#123;</div><div class="line"></div><div class="line">	var deferred = $q.defer();</div><div class="line">	</div><div class="line">	var data = <span class="keyword">new</span> FormData();</div><div class="line"></div><div class="line">	angular.forEach(obj, <span class="keyword">function</span> <span class="title"></span>(value, key) &#123;</div><div class="line"></div><div class="line">		/**</div><div class="line">		 * 文件的 key 是 file ，多个文件需要全部 append 到 FormData 里</div><div class="line">		if (key == 'file') &#123;</div><div class="line">			</div><div class="line">			angular.forEach(value, <span class="keyword">function</span> <span class="title"></span>(file) &#123;</div><div class="line"></div><div class="line">				data.append(key, file);</div><div class="line">			</div><div class="line">			&#125;);</div><div class="line">			</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		data.append(key, value);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	$http</div><div class="line">		.post(str, data, postCfgFile)</div><div class="line">		.success(<span class="keyword">function</span> <span class="title"></span>(data) &#123;</div><div class="line"></div><div class="line">			deferred.resolve(data);</div><div class="line">		</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> deferred.promise;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果设置 Content-Type 为 multipart/form-data ，后台会抛出 the current request boundary parameter is null 异常。</p>
<p>html中一般喜欢这样写，使用其他的样式来避免input[file]样式上的不足。（框架洁癖者请绕行）</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> ng-model=<span class="string">"uploadData.type"</span>&gt;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&lt;a href <span class="class"><span class="keyword">class</span></span>=<span class="string">"file-upload"</span> onclick=<span class="string">"$('#files').trigger('click')"</span>&gt;上传附件&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> id=<span class="string">"files"</span> onchange=<span class="string">"angular.element(this).scope().chooseFile(event)"</span> style=<span class="string">"display: none;"</span> multiple&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>咱们控制器中通过 event 来将文件拿到，再 push 到数组中，这样可以添加多个文件。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 选择文件</div><div class="line"> * /</div><div class="line">$scope.chooseFile = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span></span> &#123;</div><div class="line"></div><div class="line">	var files = event.target.files;</div><div class="line"></div><div class="line">	angular.forEach(files, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span></span> &#123;</div><div class="line">		</div><div class="line">		$timeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</div><div class="line">		</div><div class="line">			$scope.uploadData.file.push(file);</div><div class="line">			</div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 删除文件</div><div class="line"> * /</div><div class="line">$scope.deleteFile = <span class="function"><span class="keyword">function</span> <span class="params">(item)</span></span> &#123;</div><div class="line"></div><div class="line">	var index = $scope.uploadData.file.indexOf(item);</div><div class="line">	</div><div class="line">	$scope.uploadData.file.splice(index, <span class="number">1</span>);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 上传</div><div class="line"> * /</div><div class="line">$scope.upload = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * httpServer 封装在服务中</div><div class="line">	 * postUpload 执行 http_form_file_data 方法，并将 data 传过去</div><div class="line">	 * /</div><div class="line">	httpServer</div><div class="line">		.postUpload($scope.uploadData)</div><div class="line">		.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(result)</span></span> &#123;</div><div class="line">		</div><div class="line">			...</div><div class="line"></div><div class="line">		&#125;)</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="http://omu1mo64e.bkt.clouddn.com/2017-4-3-01.png" alt=""></p>
<p><img src="http://omu1mo64e.bkt.clouddn.com/2017-4-3-02.png" alt=""></p>
<h5 id="2-angular-file-upload"><a href="#2-angular-file-upload" class="headerlink" title="2.angular-file-upload"></a>2.angular-file-upload</h5><p>我们使用了很多的 angular-file-upload 来处理之前的上传，非常的好用，唯一麻烦的就是需要写很多的回调函数。详细使用参考 <a href="https://github.com/nervgh/angular-file-upload" target="_blank" rel="external">angular-file-upload</a></p>
<h5 id="3-form表单"><a href="#3-form表单" class="headerlink" title="3.form表单"></a>3.form表单</h5><p>使用表单是一个比较通用并且简单的方法，这里不详细说明。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">from</span> <span class="built_in">name</span>=<span class="string">"upload"</span> <span class="built_in">action</span>=<span class="string">"url"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> <span class="built_in">name</span>=<span class="string">"style"</span>&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> <span class="built_in">name</span>=<span class="string">"file"</span>&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</div><div class="line">&lt;/<span class="keyword">from</span>&gt;</div></pre></td></tr></table></figure>
<p>其他问题请联系作者：1742</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Q: post上传文件并带参数。&lt;/p&gt;
&lt;p&gt;A: 解决方法有很多种，常用form表单。我们主要说使用 angular1 发送 ajax 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1-angular1-http-post&quot;&gt;&lt;a href=&quot;#1-angular1-http-post&quot; class=&quot;headerlink&quot; title=&quot;1. angular1 $http.post&quot;&gt;&lt;/a&gt;1. angular1 $http.post&lt;/h5&gt;&lt;p&gt;后台需要传过去一个文件列表，传给后台 form-data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件 list name 为 file&lt;/li&gt;
&lt;li&gt;参数 name 为 type&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angular1" scheme="http://www.ss1742.com/tags/angular1/"/>
    
      <category term="file-upload" scheme="http://www.ss1742.com/tags/file-upload/"/>
    
      <category term="form-data" scheme="http://www.ss1742.com/tags/form-data/"/>
    
  </entry>
  
  <entry>
    <title>iview 2.0</title>
    <link href="http://www.ss1742.com/2017/03/28/iview2/"/>
    <id>http://www.ss1742.com/2017/03/28/iview2/</id>
    <published>2017-03-28T13:16:14.000Z</published>
    <updated>2017-04-09T07:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iviews-2-0"><a href="#iviews-2-0" class="headerlink" title="iviews 2.0"></a>iviews 2.0</h3><p><a href="https://www.iviewui.com/" target="_blank" rel="external">iviews 2.0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iviews-2-0&quot;&gt;&lt;a href=&quot;#iviews-2-0&quot; class=&quot;headerlink&quot; title=&quot;iviews 2.0&quot;&gt;&lt;/a&gt;iviews 2.0&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.iviewui.com/&quot; tar
    
    </summary>
    
    
      <category term="iviews" scheme="http://www.ss1742.com/tags/iviews/"/>
    
      <category term="vue" scheme="http://www.ss1742.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>html 标签</title>
    <link href="http://www.ss1742.com/2017/03/27/html-tags/"/>
    <id>http://www.ss1742.com/2017/03/27/html-tags/</id>
    <published>2017-03-26T16:00:01.000Z</published>
    <updated>2017-05-21T02:48:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h3><p>超文本标记语言 (Hyper Text Markup Language)</p>
<blockquote>
<p>基础</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;html-标签&quot;&gt;&lt;a href=&quot;#html-标签&quot; class=&quot;headerlink&quot; title=&quot;html 标签&quot;&gt;&lt;/a&gt;html 标签&lt;/h3&gt;&lt;p&gt;超文本标记语言 (Hyper Text Markup Language)&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
    
      <category term="html" scheme="http://www.ss1742.com/tags/html/"/>
    
      <category term="tags" scheme="http://www.ss1742.com/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>hexo 简易教程</title>
    <link href="http://www.ss1742.com/2017/03/26/hexo/"/>
    <id>http://www.ss1742.com/2017/03/26/hexo/</id>
    <published>2017-03-26T13:16:14.000Z</published>
    <updated>2017-04-10T04:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo-使用教程"><a href="#hexo-使用教程" class="headerlink" title="hexo 使用教程"></a>hexo 使用教程</h3><hr>
<p>详见：<a href="https://hexo.io/zh-cn" target="_blank" rel="external">hexo官方教程</a></p>
<hr>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-<span class="keyword">cli</span></div></pre></td></tr></table></figure>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo init &lt;folder&gt;</div><div class="line"><span class="variable">$ </span>cd &lt;folder&gt;</div><div class="line"><span class="variable">$ </span>npm install</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><blockquote>
<p>new </p>
</blockquote>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</div></pre></td></tr></table></figure>
<p>新建一篇文章</p>
<blockquote>
<p>generate</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">generate</span></div><div class="line">$ hexo g (简写)</div></pre></td></tr></table></figure>
<p>生成静态文件</p>
<blockquote>
<p>server</p>
</blockquote>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>
<p>启动服务器(默认4000端口)</p>
<blockquote>
<p>deploy</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo deploy</div><div class="line"><span class="variable">$ </span>hexo d (简写)</div><div class="line"><span class="variable">$ </span>hexo d -g (部署之前预先生成静态文件)</div></pre></td></tr></table></figure>
<p>部署网站</p>
<blockquote>
<p>clean</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件和已生成的静态文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo-使用教程&quot;&gt;&lt;a href=&quot;#hexo-使用教程&quot; class=&quot;headerlink&quot; title=&quot;hexo 使用教程&quot;&gt;&lt;/a&gt;hexo 使用教程&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;详见：&lt;a href=&quot;https://hexo.io/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官方教程&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo-&lt;span class=&quot;keyword&quot;&gt;cli&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;建站&quot;&gt;&lt;a href=&quot;#建站&quot; class=&quot;headerlink&quot; title=&quot;建站&quot;&gt;&lt;/a&gt;建站&lt;/h4&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;hexo init &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;cd &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.ss1742.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>1742的博客系统正式启用</title>
    <link href="http://www.ss1742.com/2017/03/19/hello-world/"/>
    <id>http://www.ss1742.com/2017/03/19/hello-world/</id>
    <published>2017-03-19T13:16:14.000Z</published>
    <updated>2017-03-19T14:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过了2天的折腾，个人博客系统终于上线了。</p>
<p>></p>
<p>脑子不老。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过了2天的折腾，个人博客系统终于上线了。&lt;/p&gt;
&lt;p&gt;&gt;&lt;/p&gt;
&lt;p&gt;脑子不老。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
